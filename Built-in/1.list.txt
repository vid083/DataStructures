-> lists are linear data structure
-> lists are ordered 
-> lists are mutable (can alter, add, del elements) - variable length
-> lists can take mixed elements such as int, float or str
-> can access list elements using indexing
-> zero based indexing - index starts from '0'
-> lists are dynamic - grows and strinks in length
-> list can be nested

list() --> list constructor
list1 = [1,2,3,"hello"]

# assigning elements to list
    list1[4] = 5
    op: [1,2,3,"hello",4]

# accesing list elements
    list1[0] --> 1
    list1[1] --> 2

    for items in list:
        print(items)
    op: 1,2,3,"hello"

# nested list
    list2 = [[1,2],3,4,5]

# accesing nested list elements
    list2[0][0] = 1
    list2[0][1] = 2


LIST OPERATIONS:
# REPLACE:
    list1 = [10,20,30,40]
    list1[2]=3.7    #replacing or assigning new value
    op: list1 = [10,20,3.7,40]

# INSERT:
syntax:-- listName.insert(index,element)
    list1.insert(2,'hello')
    op: list1 = [10,20,'hello',3.7,40]

# SORT:
syntax:-- listName.sort()
--> Alphabetical for strings, ascending for numeric
--> can done for list with same datatype
    animals = ['monkey','dog','cat','lion']
    animals.sort() 
    op: animals = ['cat', 'dog', 'lion', 'monkey']

    list2 = [10,2.3,30,4]
    list2.sort()
    op: list2 = [2.3,4,10,30]

# DELETE:
syntax:-- del listName  (using del keyword)
    del list2[1]    #deleting any element
    op: list2 = [2.3,10,30]

    del list2   #delete whole list

# APPEND:
syntax:-- listName.append(element) --> adds at last
    list2 = [1,2,3,4]
    list2.append('apple')
    op: list2 = [1,2,3,4,'apple']

# REVERSE:
syntax:-- listName.reverse()
    list2 = [1,2,3,4]
    list2.reverse()
    op: list2 = [4,3,2,1]
